version: "3.9"

services:
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    hostname: consul
    ports:
      - "8500:8500"       
    networks:
      shared-net:
        ipv4_address: 192.168.56.2
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    networks:
      shared-net:
        ipv4_address: 192.168.56.12
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      shared-net:
        ipv4_address: 192.168.56.5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.56.5:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MESSAGE_MAX_BYTES: 1048576000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576000
      KAFKA_MAX_REQUEST_SIZE: 1048576000
    depends_on:
      - zookeeper

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.5
    container_name: elasticsearch
    hostname: elasticsearch
    networks:
      shared-net:
        ipv4_address: 192.168.56.4
    ports:
      - "9200:9200" 
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 
      - ELASTIC_PASSWORD=lyfAKzoo0NYA17iIBmv4
  
  # this service merely pushes all configs/services to the consul during startup
  subscriber:
    build: ./consul/
    container_name: dummy-subscriber
    depends_on:
      - consul
      - elasticsearch
      - kafka
      - zookeeper
    networks:
      shared-net:
        ipv4_address: 192.168.56.6
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 

  search-service:
    build: ./search_service/
    container_name: search-service
    hostname: search-service
    depends_on:
      - consul
      - subscriber
      - elasticsearch
      - kafka
      - zookeeper
    networks:
      shared-net:
        ipv4_address: 192.168.56.3
    ports:
      - "9300:9300"
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 
      - ELASTIC_PASSWORD=lyfAKzoo0NYA17iIBmv4
      - ELASTIC_USER=elastic
      - INSTANCE_HOST=192.168.56.2 
      - INSTANCE_PORT=9300

  # dummy-page-adder:
  #   image: python:3.11-alpine
  #   container_name: page-adder
  #   hostname: page-adder
  #   expose:
  #     - 8000
  #   ports:
  #     - "8001:8000"
  #   networks:
  #     shared-net:
  #       ipv4_address: 192.168.56.10
  #   command: python3 -m http.server 8000

  page_adding_service:
    build:
      context: ./page_adding_service
    ports:
      - "8002:8002"
    depends_on:
      - consul
      - subscriber
      - kafka
      - zookeeper
      - page_retrieval_service_1
      - page_retrieval_service_2
      - page_retrieval_service_3
    networks:
      shared-net:
        ipv4_address: 192.168.56.10
    environment:
      - CONSUL_HOST=192.168.56.2
      - CONSUL_PORT=8500

  dummy-auth-service:
    image: python:3.11-alpine
    container_name: auth-service
    hostname: auth-service
    expose:
      - 8000
    ports:
      - "8006:8000"
    networks:
      shared-net:
        ipv4_address: 192.168.56.11
    command: python3 -m http.server 8000

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
      - shared-net

  x-page-retrieval-service: &page_retrieval_service_defaults
    build:
      context: ./page_retrieval_service
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      CONSUL_HOST: 192.168.56.2
      CONSUL_PORT: 8500

  page_retrieval_service_1:
    <<: *page_retrieval_service_defaults
    ports:
      - "8003:8001"
    hostname: page-retriever-1
    networks:
      shared-net:
        ipv4_address: 192.168.56.7
      backend:

  page_retrieval_service_2:
    <<: *page_retrieval_service_defaults
    ports:
      - "8004:8001"
    hostname: page-retriever-2
    networks:
      shared-net:
        ipv4_address: 192.168.56.8
      backend:

  page_retrieval_service_3:
    <<: *page_retrieval_service_defaults
    ports:
      - "8005:8001"
    hostname: page-retriever-3
    networks:
      shared-net:
        ipv4_address: 192.168.56.9
      backend:

  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    hostname: api-gateway
    depends_on:
      - page_retrieval_service_1
      - page_retrieval_service_2
      - page_retrieval_service_3
      - page_adding_service
      - dummy-auth-service
      - search-service
    ports:
      - "8100:80"
    volumes:
      - ./nginx/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/static:/usr/share/nginx/html
    networks:
      shared-net:
        ipv4_address: 192.168.56.20


volumes:
  glusterfs-data1:
  glusterfs-data2:
  glusterfs-data3:
  postgres_data:


networks:
  backend:

  glusterfs-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

  shared-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.56.0/24


  # dummy-page-retriever-1:
  #   image: python:3.11-alpine
  #   container_name: page-retriever-1
  #   hostname: page-retriever-1
  #   expose:
  #     - 8000
  #   ports:
  #     - "8001:8000"
  #   networks:
  #     shared-net:
  #       ipv4_address: 192.168.56.7
  #   command: python3 -m http.server 8000

  # dummy-page-retriever-2:
  #   image: python:3.11-alpine
  #   container_name: page-retriever-2
  #   hostname: page-retriever-2
  #   expose:
  #     - 8000
  #   ports:
  #     - "8002:8000"
  #   networks:
  #     shared-net:
  #       ipv4_address: 192.168.56.8
  #   command: python3 -m http.server 8000

  # dummy-page-retriever-3:
  #   image: python:3.11-alpine
  #   container_name: page-retriever-3
  #   hostname: page-retriever-3
  #   expose:
  #     - 8000
  #   ports:
  #     - "8003:8000"
  #   networks:
  #     shared-net:
  #       ipv4_address: 192.168.56.9
  #   command: python3 -m http.server 8000
