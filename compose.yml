version: "3.9"

services:
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    hostname: consul
    ports:
      - "8500:8500"       
    networks:
      shared-net:
        ipv4_address: 192.168.56.2
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.5
    container_name: elasticsearch
    hostname: elasticsearch
    networks:
      shared-net:
        ipv4_address: 192.168.56.4
    ports:
      - "9200:9200" 
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 
      - ELASTIC_PASSWORD=lyfAKzoo0NYA17iIBmv4

  # this service merely pushes all configs/services to the consul during startup
  subscriber:
    build: ./consul/
    container_name: dummy-subscriber
    depends_on:
      - consul
      - elasticsearch
      - kafka
    networks:
      shared-net:
        ipv4_address: 192.168.56.6
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 

  search-service:
    build: ./search_service/
    container_name: search-service
    hostname: search-service
    depends_on:
      - consul
      - subscriber
      - elasticsearch
      #- kafka
    networks:
      shared-net:
        ipv4_address: 192.168.56.21
    ports:
      - "9300:9300"
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2 
      - ELASTIC_PASSWORD=lyfAKzoo0NYA17iIBmv4
      - ELASTIC_USER=elastic
      - INSTANCE_HOST=192.168.56.2 
      - INSTANCE_PORT=9300

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    networks:
      shared-net:
        ipv4_address: 192.168.56.12
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      shared-net:
        ipv4_address: 192.168.56.5
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.56.5:9092,INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_MESSAGE_MAX_BYTES: 1048576000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576000
      KAFKA_MAX_REQUEST_SIZE: 1048576000
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - zookeeper

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init
    networks:
      shared-net:
        ipv4_address: 192.168.56.13
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' &&
        sleep 10 &&
        kafka-topics --create --if-not-exists --topic retrieve-pages-topic --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        kafka-topics --create --if-not-exists --topic search-pages-topic --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 &&
        echo 'Topics created successfully'
      "

  page_retrieval_service_db:
    extends:
      file: ./page_retrieval_service/docker-compose.yml
      service: page_retrieval_service_db

  page_adding_service:
    build:
      context: ./page_adding_service
    ports:
      - "8002:8002"
    depends_on:
      - consul
      - kafka
      - kafka-init
      - page_retrieval_service_1
      - page_retrieval_service_2
      - page_retrieval_service_3
    networks:
      shared-net:
        ipv4_address: 192.168.56.10
    environment:
      - CONSUL_HOST=192.168.56.2
      - CONSUL_PORT=8500

  page_retrieval_service_1:
    extends:
      file: ./page_retrieval_service/docker-compose.yml
      service: page_retrieval_service
    ports:
      - "8003:8001"
    hostname: page-retriever-1
    networks:
      shared-net:
        ipv4_address: 192.168.56.7
      backend:
    depends_on:
      page_retrieval_service_db:
        condition: service_healthy
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    environment:
      DB_HOST: page_retrieval_service_db
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      CONSUL_HOST: 192.168.56.2
      CONSUL_PORT: 8500

  page_retrieval_service_2:
    extends:
      file: ./page_retrieval_service/docker-compose.yml
      service: page_retrieval_service
    ports:
      - "8004:8001"
    hostname: page-retriever-2
    networks:
      shared-net:
        ipv4_address: 192.168.56.8
      backend:
    depends_on:
      page_retrieval_service_db:
        condition: service_healthy
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    environment:
      DB_HOST: page_retrieval_service_db
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      CONSUL_HOST: 192.168.56.2
      CONSUL_PORT: 8500

  page_retrieval_service_3:
    extends:
      file: ./page_retrieval_service/docker-compose.yml
      service: page_retrieval_service
    ports:
      - "8005:8001"
    hostname: page-retriever-3
    networks:
      shared-net:
        ipv4_address: 192.168.56.9
      backend:
    depends_on:
      page_retrieval_service_db:
        condition: service_healthy
      kafka:
        condition: service_started
      kafka-init:
        condition: service_completed_successfully
    environment:
      DB_HOST: page_retrieval_service_db
      DB_PORT: 5432
      DB_NAME: mydb
      DB_USER: myuser
      DB_PASSWORD: mypassword
      CONSUL_HOST: 192.168.56.2
      CONSUL_PORT: 8500

  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    hostname: api-gateway
    depends_on:
      - page_retrieval_service_1
      - page_retrieval_service_2
      - page_retrieval_service_3
      - search-service
      - page_adding_service
    ports:
      - "8100:80"
    volumes:
      - ./nginx/configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/static:/usr/share/nginx/html
    networks:
      shared-net:
        ipv4_address: 192.168.56.20

  auth-service:
    build: ./auth_service 
    container_name: auth-service
    hostname: auth-service
    ports:
      - "9100:9100"  
    networks:
      - shared-net  
    environment:
      - CONSUL_PORT=8500
      - CONSUL_HOST=192.168.56.2
    depends_on:
      - consul  
      - postgres-auth
    
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    networks:
      - shared-net
      
volumes:
  glusterfs-data1:
  glusterfs-data2:
  glusterfs-data3:
  postgres_data:

networks:
  backend:

  glusterfs-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24

  shared-net:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.56.0/24
